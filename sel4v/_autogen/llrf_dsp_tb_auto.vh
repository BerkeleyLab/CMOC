// parse_vfile  llrf_dsp_tb.v
// module=llrf_dsp instance=dut gvar=None gcnt=None
// parse_vfile :llrf_dsp_tb.v ./llrf_dsp.v
// module=piezo_control instance=piezo gvar=None gcnt=None
// parse_vfile :llrf_dsp_tb.v:./llrf_dsp.v ./piezo_control.v
// found output address in module piezo_control, base=sf_consts
// found output address in module piezo_control, base=trace_en
// module=fdbk_core instance=fdbk_core gvar=None gcnt=None
// parse_vfile :llrf_dsp_tb.v:./llrf_dsp.v ./fdbk_core.v
// module=mp_proc instance=mp_proc gvar=None gcnt=None
// parse_vfile :llrf_dsp_tb.v:./llrf_dsp.v:./fdbk_core.v ./mp_proc.v
// found output address in module mp_proc, base=setmp
// found output address in module mp_proc, base=coeff
// found output address in module mp_proc, base=lim
// module=lp_notch instance=lp_notch gvar=None gcnt=None
// parse_vfile :llrf_dsp_tb.v:./llrf_dsp.v ./lp_notch.v
// module=lp1 instance=lp1a gvar=None gcnt=None
// parse_vfile :llrf_dsp_tb.v:./llrf_dsp.v:./lp_notch.v ./lp1.v
// found output address in module lp1, base=kx
// found output address in module lp1, base=ky
// module=lp1 instance=lp1b gvar=None gcnt=None
`define AUTOMATIC_dut .phase_step(dut_phase_step),\
	.modulo(dut_modulo),\
	.ctlr_ph_reset(dut_ctlr_ph_reset),\
	.wave_samp_per(dut_wave_samp_per),\
	.chan_keep(dut_chan_keep),\
	.wave_shift(dut_wave_shift),\
	.use_fiber_iq(dut_use_fiber_iq),\
	.tag(dut_tag),\
	.piezo_piezo_dc(dut_piezo_piezo_dc),\
	.piezo_sf_consts(dut_piezo_sf_consts),\
	.piezo_sf_consts_addr(dut_piezo_sf_consts_addr),\
	.piezo_trace_en(dut_piezo_trace_en),\
	.piezo_trace_en_addr(dut_piezo_trace_en_addr),\
	.fdbk_core_coarse_scale(dut_fdbk_core_coarse_scale),\
	.fdbk_core_mp_proc_sel_en(dut_fdbk_core_mp_proc_sel_en),\
	.fdbk_core_mp_proc_ph_offset(dut_fdbk_core_mp_proc_ph_offset),\
	.fdbk_core_mp_proc_sel_thresh(dut_fdbk_core_mp_proc_sel_thresh),\
	.fdbk_core_mp_proc_setmp(dut_fdbk_core_mp_proc_setmp),\
	.fdbk_core_mp_proc_coeff(dut_fdbk_core_mp_proc_coeff),\
	.fdbk_core_mp_proc_lim(dut_fdbk_core_mp_proc_lim),\
	.fdbk_core_mp_proc_setmp_addr(dut_fdbk_core_mp_proc_setmp_addr),\
	.fdbk_core_mp_proc_coeff_addr(dut_fdbk_core_mp_proc_coeff_addr),\
	.fdbk_core_mp_proc_lim_addr(dut_fdbk_core_mp_proc_lim_addr),\
	.lp_notch_lp1a_kx(dut_lp_notch_lp1a_kx),\
	.lp_notch_lp1a_kx_addr(dut_lp_notch_lp1a_kx_addr),\
	.lp_notch_lp1a_ky(dut_lp_notch_lp1a_ky),\
	.lp_notch_lp1a_ky_addr(dut_lp_notch_lp1a_ky_addr),\
	.lp_notch_lp1b_kx(dut_lp_notch_lp1b_kx),\
	.lp_notch_lp1b_kx_addr(dut_lp_notch_lp1b_kx_addr),\
	.lp_notch_lp1b_ky(dut_lp_notch_lp1b_ky),\
	.lp_notch_lp1b_ky_addr(dut_lp_notch_lp1b_ky_addr)
// machine-generated by newad.py
`ifdef LB_DECODE_llrf_dsp_tb
`include "addr_map_llrf_dsp_tb.vh"
`define AUTOMATIC_self input lb_clk, input [31:0] lb_data, input lb_write, input [13:0] lb_addr
`define AUTOMATIC_decode\
wire we_dut_phase_step = lb_write&(`ADDR_HIT_dut_phase_step);\
reg [31:0] dut_phase_step=0; always @(posedge lb_clk) if (we_dut_phase_step) dut_phase_step <= lb_data;\
wire we_dut_modulo = lb_write&(`ADDR_HIT_dut_modulo);\
reg [11:0] dut_modulo=0; always @(posedge lb_clk) if (we_dut_modulo) dut_modulo <= lb_data;\
wire we_dut_ctlr_ph_reset = lb_write&(`ADDR_HIT_dut_ctlr_ph_reset);\
reg [0:0] dut_ctlr_ph_reset=0; always @(posedge lb_clk) dut_ctlr_ph_reset <= we_dut_ctlr_ph_reset ? lb_data[0:0] : 1'b0;\
wire we_dut_wave_samp_per = lb_write&(`ADDR_HIT_dut_wave_samp_per);\
reg [7:0] dut_wave_samp_per=0; always @(posedge lb_clk) if (we_dut_wave_samp_per) dut_wave_samp_per <= lb_data;\
wire we_dut_chan_keep = lb_write&(`ADDR_HIT_dut_chan_keep);\
reg [11:0] dut_chan_keep=0; always @(posedge lb_clk) if (we_dut_chan_keep) dut_chan_keep <= lb_data;\
wire we_dut_wave_shift = lb_write&(`ADDR_HIT_dut_wave_shift);\
reg [2:0] dut_wave_shift=0; always @(posedge lb_clk) if (we_dut_wave_shift) dut_wave_shift <= lb_data;\
wire we_dut_use_fiber_iq = lb_write&(`ADDR_HIT_dut_use_fiber_iq);\
reg [1:0] dut_use_fiber_iq=0; always @(posedge lb_clk) if (we_dut_use_fiber_iq) dut_use_fiber_iq <= lb_data;\
wire we_dut_tag = lb_write&(`ADDR_HIT_dut_tag);\
reg [7:0] dut_tag=0; always @(posedge lb_clk) if (we_dut_tag) dut_tag <= lb_data;\
wire we_dut_piezo_piezo_dc = lb_write&(`ADDR_HIT_dut_piezo_piezo_dc);\
reg [15:0] dut_piezo_piezo_dc=0; always @(posedge lb_clk) if (we_dut_piezo_piezo_dc) dut_piezo_piezo_dc <= lb_data;\
wire [2:0] dut_piezo_sf_consts_addr;\
wire [19:0] dut_piezo_sf_consts;\
wire we_dut_piezo_sf_consts = lb_write&(`ADDR_HIT_dut_piezo_sf_consts);\
dpram #(.aw(3),.dw(20)) dp_dut_piezo_sf_consts(\
	.clka(lb_clk), .addra(lb_addr[2:0]), .dina(lb_data[19:0]), .wena(we_dut_piezo_sf_consts),\
	.clkb(lb_clk), .addrb(dut_piezo_sf_consts_addr), .doutb(dut_piezo_sf_consts));\
wire [6:0] dut_piezo_trace_en_addr;\
wire [0:0] dut_piezo_trace_en;\
wire we_dut_piezo_trace_en = lb_write&(`ADDR_HIT_dut_piezo_trace_en);\
dpram #(.aw(7),.dw(1)) dp_dut_piezo_trace_en(\
	.clka(lb_clk), .addra(lb_addr[6:0]), .dina(lb_data[0:0]), .wena(we_dut_piezo_trace_en),\
	.clkb(lb_clk), .addrb(dut_piezo_trace_en_addr), .doutb(dut_piezo_trace_en));\
wire we_dut_fdbk_core_coarse_scale = lb_write&(`ADDR_HIT_dut_fdbk_core_coarse_scale);\
reg [1:0] dut_fdbk_core_coarse_scale=0; always @(posedge lb_clk) if (we_dut_fdbk_core_coarse_scale) dut_fdbk_core_coarse_scale <= lb_data;\
wire we_dut_fdbk_core_mp_proc_sel_en = lb_write&(`ADDR_HIT_dut_fdbk_core_mp_proc_sel_en);\
reg [0:0] dut_fdbk_core_mp_proc_sel_en=0; always @(posedge lb_clk) if (we_dut_fdbk_core_mp_proc_sel_en) dut_fdbk_core_mp_proc_sel_en <= lb_data;\
wire we_dut_fdbk_core_mp_proc_ph_offset = lb_write&(`ADDR_HIT_dut_fdbk_core_mp_proc_ph_offset);\
reg [17:0] dut_fdbk_core_mp_proc_ph_offset=0; always @(posedge lb_clk) if (we_dut_fdbk_core_mp_proc_ph_offset) dut_fdbk_core_mp_proc_ph_offset <= lb_data;\
wire we_dut_fdbk_core_mp_proc_sel_thresh = lb_write&(`ADDR_HIT_dut_fdbk_core_mp_proc_sel_thresh);\
reg [17:0] dut_fdbk_core_mp_proc_sel_thresh=0; always @(posedge lb_clk) if (we_dut_fdbk_core_mp_proc_sel_thresh) dut_fdbk_core_mp_proc_sel_thresh <= lb_data;\
wire [1:0] dut_fdbk_core_mp_proc_setmp_addr;\
wire [17:0] dut_fdbk_core_mp_proc_setmp;\
wire we_dut_fdbk_core_mp_proc_setmp = lb_write&(`ADDR_HIT_dut_fdbk_core_mp_proc_setmp);\
dpram #(.aw(2),.dw(18)) dp_dut_fdbk_core_mp_proc_setmp(\
	.clka(lb_clk), .addra(lb_addr[1:0]), .dina(lb_data[17:0]), .wena(we_dut_fdbk_core_mp_proc_setmp),\
	.clkb(lb_clk), .addrb(dut_fdbk_core_mp_proc_setmp_addr), .doutb(dut_fdbk_core_mp_proc_setmp));\
wire [1:0] dut_fdbk_core_mp_proc_coeff_addr;\
wire [17:0] dut_fdbk_core_mp_proc_coeff;\
wire we_dut_fdbk_core_mp_proc_coeff = lb_write&(`ADDR_HIT_dut_fdbk_core_mp_proc_coeff);\
dpram #(.aw(2),.dw(18)) dp_dut_fdbk_core_mp_proc_coeff(\
	.clka(lb_clk), .addra(lb_addr[1:0]), .dina(lb_data[17:0]), .wena(we_dut_fdbk_core_mp_proc_coeff),\
	.clkb(lb_clk), .addrb(dut_fdbk_core_mp_proc_coeff_addr), .doutb(dut_fdbk_core_mp_proc_coeff));\
wire [1:0] dut_fdbk_core_mp_proc_lim_addr;\
wire [17:0] dut_fdbk_core_mp_proc_lim;\
wire we_dut_fdbk_core_mp_proc_lim = lb_write&(`ADDR_HIT_dut_fdbk_core_mp_proc_lim);\
dpram #(.aw(2),.dw(18)) dp_dut_fdbk_core_mp_proc_lim(\
	.clka(lb_clk), .addra(lb_addr[1:0]), .dina(lb_data[17:0]), .wena(we_dut_fdbk_core_mp_proc_lim),\
	.clkb(lb_clk), .addrb(dut_fdbk_core_mp_proc_lim_addr), .doutb(dut_fdbk_core_mp_proc_lim));\
wire [0:0] dut_lp_notch_lp1a_kx_addr;\
wire [17:0] dut_lp_notch_lp1a_kx;\
wire we_dut_lp_notch_lp1a_kx = lb_write&(`ADDR_HIT_dut_lp_notch_lp1a_kx);\
dpram #(.aw(1),.dw(18)) dp_dut_lp_notch_lp1a_kx(\
	.clka(lb_clk), .addra(lb_addr[0:0]), .dina(lb_data[17:0]), .wena(we_dut_lp_notch_lp1a_kx),\
	.clkb(lb_clk), .addrb(dut_lp_notch_lp1a_kx_addr), .doutb(dut_lp_notch_lp1a_kx));\
wire [0:0] dut_lp_notch_lp1a_ky_addr;\
wire [17:0] dut_lp_notch_lp1a_ky;\
wire we_dut_lp_notch_lp1a_ky = lb_write&(`ADDR_HIT_dut_lp_notch_lp1a_ky);\
dpram #(.aw(1),.dw(18)) dp_dut_lp_notch_lp1a_ky(\
	.clka(lb_clk), .addra(lb_addr[0:0]), .dina(lb_data[17:0]), .wena(we_dut_lp_notch_lp1a_ky),\
	.clkb(lb_clk), .addrb(dut_lp_notch_lp1a_ky_addr), .doutb(dut_lp_notch_lp1a_ky));\
wire [0:0] dut_lp_notch_lp1b_kx_addr;\
wire [17:0] dut_lp_notch_lp1b_kx;\
wire we_dut_lp_notch_lp1b_kx = lb_write&(`ADDR_HIT_dut_lp_notch_lp1b_kx);\
dpram #(.aw(1),.dw(18)) dp_dut_lp_notch_lp1b_kx(\
	.clka(lb_clk), .addra(lb_addr[0:0]), .dina(lb_data[17:0]), .wena(we_dut_lp_notch_lp1b_kx),\
	.clkb(lb_clk), .addrb(dut_lp_notch_lp1b_kx_addr), .doutb(dut_lp_notch_lp1b_kx));\
wire [0:0] dut_lp_notch_lp1b_ky_addr;\
wire [17:0] dut_lp_notch_lp1b_ky;\
wire we_dut_lp_notch_lp1b_ky = lb_write&(`ADDR_HIT_dut_lp_notch_lp1b_ky);\
dpram #(.aw(1),.dw(18)) dp_dut_lp_notch_lp1b_ky(\
	.clka(lb_clk), .addra(lb_addr[0:0]), .dina(lb_data[17:0]), .wena(we_dut_lp_notch_lp1b_ky),\
	.clkb(lb_clk), .addrb(dut_lp_notch_lp1b_ky_addr), .doutb(dut_lp_notch_lp1b_ky));\
wire [31:0] mirror_out_0;wire mirror_write_0 = lb_write &(`ADDR_HIT_MIRROR);\
dpram #(.aw(`MIRROR_WIDTH),.dw(32)) mirror_0(\
	.clka(lb_clk), .addra(lb_addr[`MIRROR_WIDTH-1:0]), .dina(lb_data[31:0]), .wena(mirror_write_0),\
	.clkb(lb_clk), .addrb(lb_addr[`MIRROR_WIDTH-1:0]), .doutb(mirror_out_0));\

`else
`define AUTOMATIC_self input  [31:0] dut_phase_step,\
input  [11:0] dut_modulo,\
input  [0:0] dut_ctlr_ph_reset,\
input  [7:0] dut_wave_samp_per,\
input  [11:0] dut_chan_keep,\
input  [2:0] dut_wave_shift,\
input  [1:0] dut_use_fiber_iq,\
input  [7:0] dut_tag,\
input  [15:0] dut_piezo_piezo_dc,\
input  [19:0] dut_piezo_sf_consts,\
output  [2:0] dut_piezo_sf_consts_addr,\
input  [0:0] dut_piezo_trace_en,\
output  [6:0] dut_piezo_trace_en_addr,\
input  [1:0] dut_fdbk_core_coarse_scale,\
input  [0:0] dut_fdbk_core_mp_proc_sel_en,\
input signed [17:0] dut_fdbk_core_mp_proc_ph_offset,\
input signed [17:0] dut_fdbk_core_mp_proc_sel_thresh,\
input signed [17:0] dut_fdbk_core_mp_proc_setmp,\
input signed [17:0] dut_fdbk_core_mp_proc_coeff,\
input signed [17:0] dut_fdbk_core_mp_proc_lim,\
output  [1:0] dut_fdbk_core_mp_proc_setmp_addr,\
output  [1:0] dut_fdbk_core_mp_proc_coeff_addr,\
output  [1:0] dut_fdbk_core_mp_proc_lim_addr,\
input signed [17:0] dut_lp_notch_lp1a_kx,\
output  [0:0] dut_lp_notch_lp1a_kx_addr,\
input signed [17:0] dut_lp_notch_lp1a_ky,\
output  [0:0] dut_lp_notch_lp1a_ky_addr,\
input signed [17:0] dut_lp_notch_lp1b_kx,\
output  [0:0] dut_lp_notch_lp1b_kx_addr,\
input signed [17:0] dut_lp_notch_lp1b_ky,\
output  [0:0] dut_lp_notch_lp1b_ky_addr
`define AUTOMATIC_decode
`endif
