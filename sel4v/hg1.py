#!/usr/bin/python
import sys
import re
from os.path import dirname
class port():
	def __init__(self,io,sign,msb,lsb,name='',length=1,addr_msb=0,addr_lsb=0):
		self.io=io
		self.sign= sign if sign else ''
		self.msb=msb
		self.lsb=lsb
		self.name=name
		self.addr_msb=addr_msb;
		self.addr_lsb=addr_lsb;
	def decode(self):
		decode_def = "wire we_%s=lb_write&(`ADDR_HIT_%s);"%(self.name,self.name)

		if (self.addr_msb==0 and self.addr_lsb==0):
			decode_str="reg [%d:%d] %s=0; always @(posedge clk) if (we_%s) %s <= lb_data;"%(self.msb,self.lsb,self.name,self.name,self.name)
		else:
			addr_range=r"[%s:%s]"%(self.addr_msb,self.addr_lsb)
			data_range=r"[%s:%s]"%(self.msb,self.lsb)
			addr_width=self.addr_msb-self.addr_lsb+1
			data_width=self.msb-self.lsb+1

			wire_def = "wire %s %s_addr;wire %s %s;"%(addr_range,self.name,data_range,self.name)
			dpram_a = ".clka(clk),.addra(lb_addr%s),.dina(lb_data%s),.wena(we_%s)"%(addr_range,data_range,self.name)
			dpram_b = ".clkb(clk),.addrb(%s_addr),.doutb(%s)"%(self.name,self.name)
			dpram_def = "dpram #(.aw(%d),.dw(%d)) dp_%s(%s,%s);"%(addr_width,data_width,self.name,dpram_a,dpram_b)
			decode_str=wire_def+decode_def+dpram_def
		return decode_str;
	def self_port(self):
		self_port_str="%s %s [%s:%s] %s"%(self.io,self.sign,self.msb,self.lsb,self.name)
		return self_port_str;

class verilog_module():
	def __init__(self,module_type=None,filename=None,top=False,family_name='',name='',searchpath=".",gen_index=None,gen_var=None):
		self.ports={};
		self.submodules={};
		self.name=name;
		self.top=top
		if (filename):
			self.searchpath=dirname(filename)
			if (self.searchpath == ""): self.searchpath = "."
			self.filename=filename
			self.module_type=filename.split('/')[-1].split('.')[0]
		elif (module_type):
			self.module_type=module_type
			self.searchpath=searchpath
			self.filename=self.find_module(module_type)
		else:
			print 'please provide me some clue'
		self.parse_vfile(filename=self.filename);
		for submodule_name in self.submodules.keys():
			self.ports.update(self.submodules[submodule_name].ports)
		self.register_or_dpram()
		self.family_name=('' if self.top else self.full_name+'_')

	def self_ports(self):
		self_ports_str="`define AUTOMATIC_%s"%self.name
		self_ports_str+=", ".join(self.ports[port].self_port() for port in self.ports.keys())
		return self_ports_str

	def find_module(self,module_type):
		print 'search',self.searchpath
		return self.searchpath+'/'+module_type+'.v'

	def parse_vfile(self,filename=None):
		try:
			f=open(self.filename)
			s=f.read()
			f.close()
			for l in s.split('\n'):
				m_submodule=re.search(r'^\s*(\w+)\s+(#\(.*\) *)?(\w+)\s*//\s*auto\(*(\w*),*(\d*)\)*',l)
				if m_submodule:
					submodule_type=m_submodule.group(1)
					submodule_param=m_submodule.group(2)
					submodule_name=m_submodule.group(3)
					submodule_gvar=m_submodule.group(4) if len(m_submodule.group(4)) else None
					submodule_gcnt=int(m_submodule.group(5)) if len(m_submodule.group(5)) else None
					if submodule_gcnt:
						for gen_index in range(submodule_gcnt):
							new_module=verilog_module(module_type=submodule_type,family_name=self.full_name,name=submodule_name,searchpath=self.searchpath,gen_index=gen_index,gen_var=submodule_gvar)
							if not self.submodules.has_key(new_module):
								self.submodules[submodule_name]=new_module
					else:
						new_module=verilog_module(module_type=submodule_type,family_name=self.full_name,name=submodule_name,searchpath=self.searchpath)
						if not self.submodules.has_key(new_module):
							self.submodules[submodule_name]=new_module

				m_external_port=re.search(r'\b(input|output)\s+(signed)?\s*\[(\d+):(\d+)\]\s*(\w+),?\s*//\s*external',l)
				if m_external_port:
					io=m_external_port.group(1)
					sign=m_external_port.group(2)
					msb=int(m_external_port.group(3))
					lsb=int(m_external_port.group(4))
					port_name=m_external_port.group(5)
					self.ports[port_name]=port(io=io,sign=sign,msb=msb,lsb=lsb,name=self.name+'_'+port_name)
		except:
			print 'open file error, %s, filename is %s'%(self.filename, filename)
			pass
	def register_or_dpram(self):
		portnames=self.ports.keys();
		for port_name in [key for key in self.ports.keys() if self.ports.has_key(key+'_addr')]:
			if self.ports[port_name+'_addr'].io=='output':
				self.ports[port_name].addr_msb=self.ports[port_name+'_addr'].msb
				self.ports[port_name].addr_lsb=self.ports[port_name+'_addr'].lsb
	def decode_ports(self):
		return " ".join([self.ports[port].decode() for port in self.ports])
	def testauto(self):
		print 'decode'
		print self.decode_ports()
		print 'self_ports'
		print self.self_ports()

	def auto_vh_gen(self):
		print r'''// machine-generated by newad.py %s
`ifdef LB_DECODE_%s
`include "addr_map.vh"
`define AUTOMATIC_self input [31:0] lb_data, input lb_write, input [15:0] lb_addr
`define AUTOMATIC_decode %s
`else
`define AUTOMATIC_self %s
`define AUTOMATIC_decode
`endif
`define AUTOMATIC_map %s'''%(self.filename,self.module_type," ".join([self.ports[port].decode() for port in self.ports]),", ".join(self_ports)," ".join(self_map))
	def print_sub(self):
		print self.name
		for module in self.submodules.keys():
			self.submodules[module].print_sub()

if __name__=="__main__":
	testmodule=verilog_module(filename=sys.argv[1],top=True)
	testmodule.testauto()
	testmodule.print_sub()
	#print testmodule.name

