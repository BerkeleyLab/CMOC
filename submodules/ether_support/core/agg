#!/usr/bin/perl
$inputs=join(" ",@ARGV);
@ports=@ARGV;

sub print_ports {
printf "\n";
printf "// Magic Rx client ports\n";
$ix=1;
for $p (@ports) {
	@pl=split("\\+",$p);
	printf "\toutput [7:0] data_rx_%u,\n", $ix;
	printf "\toutput [$#pl:0] ready_%u,\n", $ix;
	printf "\toutput       strobe_rx_%u,\n", $ix;
	printf "\toutput       crc_rx_%u,\n", $ix;
	printf "\n";
	$ix++;
}

printf "// Magic Tx client ports\n";
$ix=1;
for $p (@ports) {
	@pl=split("\\+",$p);
	printf "\tinput  [$#pl:0] req_%u,\n", $ix;
	printf "\tinput [jumbo_dw-1:0] length_%u,\n", $ix;
	printf "\toutput       ack_%u,\n", $ix;
	printf "\toutput       strobe_tx_%u,\n", $ix;
	printf "\toutput       warn_%u,\n", $ix;
	printf "\tinput  [7:0] data_tx_%u,\n", $ix;
	printf "\n";
	$ix++;
}
printf "// End magic ports\n\n";
}

sub ps_port {
	my ($p) = @_;
	@pl=split("\\+",$p);
	if ($#pl==0) {
		$ps=sprintf(' #(.port(%u), .jumbo_dw(jumbo_dw))',$p);
	} elsif ($#pl==1) {
		$ps=sprintf('2 #(.port1(%u),.port2(%u), .jumbo_dw(jumbo_dw))',$pl[0],$pl[1]);
	} else {
		die;
	}
	$ps;
}

sub print_instances {
printf "\n// Magic Rx client instantiations\n";
$ix=1;
for $p (@ports) {
	printf "wire [11:0] crx%u;\n", $ix;
	$ix++;
}
$ix=1;
for $p (@ports) {
	printf "emux_rx%s rx_%u(.clk(clk), .in_c(crx%u), .out_c(crx%u), .data(data_rx_%u), .ready(ready_%u), .strobe(strobe_rx_%u), .crc(crc_rx_%u));\n", ps_port($p), $ix, $ix-1, $ix, $ix, $ix, $ix, $ix;
	$ix++;
}

printf "\n// Magic Tx client instantiations\n";
$ix=1;
for $p (@ports) {
	printf "wire [9:0] ctx%u;\n", $ix;
	$ix++;
}
$ix=1;
for $p (@ports) {
	printf "emux_tx%s tx_%u(.clk(clk), .in_c(ctx%u), .out_c(ctx%u), .data(data_tx_%u), .c_l(length_%u), .c_s(strobe_tx_%u), .c_w(warn_%u), .c_a(ack_%u));\n", ps_port($p), $ix, $ix-1, $ix, $ix, $ix, $ix, $ix, $ix;
	$ix++;
}
printf "\nassign ctx_out = ctx%u;  // end of ctx chain\n", $#ports+1;
printf "\n// End magic instantiations\n\n";
}

sub print_wiring {
printf "// Automatically generated request list wiring\n";
	$reqs="req_1,req_2,req_3,req_4";
	$pix=0;
	$udpn=0;
	$reqs="";
	for $p (@ports) {
		$pix++;
		$reqs=$reqs . sprintf(",req_%s",$pix);
		@pl=split("\\+",$p);
		# print "// $p: $#pl\n";
		$udpn=$udpn+1+$#pl;
	}
	printf("// %d Tx clients wired, %d UDP ports used\n",$pix,$udpn);
	$reqs=~s/^,//;
	printf("wire [15:0] tx_request={%s,%d'b0,arp_reply_req,icmp_reply_req,6'b0};\n",$reqs,8-$udpn);
}

sub print_port_data {
printf "// Automatically generated ROM contents\n";
$pix=32;
for $p (@ports) {
	@pl=split("\\+",$p);
	for $pp (reverse(@pl)) {
		$pix--; printf("\t5'h%2.2x: data = 8'h%2.2x;  // decimal %d\n",$pix,$pp%256,$pp);
		$pix--; printf("\t5'h%2.2x: data = 8'h%2.2x;\n",$pix,$pp/256);
	}
}
for (;$pix--;$pix>=0) {
	printf("\t5'h%2.2x: data = 0;\n",$pix);
}
}

sub print_default_port {
printf "// Automatically generated default destination port\n";
printf("\tparameter [15:0] DEFAULT_DESTINATION_UDP_PORT = 16'd%d,\n", @ports[0] & 0xFFFF);
}

@ARGV=();
print "// Machine generated by agg $inputs\n";
while (<>) {
	if    (/Magic ports/) { print_ports(); }
	elsif (/Magic instantiation/) { print_instances(); }
	elsif (/Magic request wiring/) { print_wiring(); }
	elsif (/Magic port data/) { print_port_data(); }
	elsif (/Magic default destination UDP port/) { print_default_port(); }
	else { print $_; }
}
