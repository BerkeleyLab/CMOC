`timescale 1ns / 1ns

// This hardware design addresses the custom-FPGA to commodity-CPU boundary through Gigabit Ethernet.
// providing an Abstract GMII (AGMII) to N standard client interface(s).

module ethernet_core(
	// Reference clock input
    input clk125,

    // AGMII interface
    // AGMII Rx
    input  RX_CLK,
    input [7:0] RXD,
    input RX_DV,
    input RX_ER,
    // AGMII Tx
    output GTX_CLK,
    output [7:0] TXD,
    output TX_EN,
    output TX_ER,

	// IP and MAC address setting
    input [8:0] address_set,
	// Magic ports
    output [7:0] ethernet_leds,
    output [2:0] debug
);

// LED assignment legend (ethernet_leds) to report status to upper layers.
// Derived from bit assignments here and in aggregate.v, (see aggregate_leds).
//LED[0]: 125MHz for Rx data
//LED[1]: 125MHz for Tx data
//LED[2]: ARP Reply Request
//LED[3]: Rx Packet activity
//LED[4]: Tx Packet activity
//LED[5]: Rx CRC pass (sticks on after a single packet passes CRC test)
//LED[6]: Rx PLL locked
//LED[7]: unused

//IP and MAC adresses
parameter [31:0] ip = {8'd128, 8'd3, 8'd128, 8'd172};  // 128.3.128.172
parameter [47:0] mac = 48'h125555000138;

wire [7:0] abst2_in, abst2_out;
wire abst2_in_s, abst2_out_s;
wire agmii_clk;

agmii2gmii agmii2gmii_bridge(
    // Reference clock input
    .clk125(clk125),

    // GMII interface
    // GMII Rx
    .RX_CLK(RX_CLK),
    .RXD(RXD),
    .RX_DV(RX_DV),
    .RX_ER(RX_ER),
    // GMII Tx
    .GTX_CLK(GTX_CLK),
    .TXD(TXD),
    .TX_EN(TX_EN),
    .TX_ER(TX_ER),

    // AGMII interface (aggregate)
    // Single clock domain for transmit and receive data
    .agmii_clk(agmii_clk),
    // AGMII Rx
    .agmii_in(abst2_out),
    .agmii_in_s(abst2_out_s),
    // AGMII Tx
    .agmii_out(abst2_in),
    .agmii_out_s(abst2_in_s)
);

wire [3:0] aggregate_leds;
aggregate #(.ip(ip), .mac(mac)) a2(
    .clk(agmii_clk),  // Single clock domain for transmit and receive data
    // AGMII in
    .eth_in(abst2_in),   .eth_in_s(abst2_in_s),
    // AGMII out
    .eth_out(abst2_out), .eth_out_s(abst2_out_s),
    .rx_crc_ok(rx_crc_ok),
    .rx_crc_fault(rx_crc_fault),
    .address_set(address_set),
	 // Magic instance port wiring
    // Export aggregate_leds for status monitoring
    .leds(aggregate_leds)
);

// CRC fault activity
wire rx_crc_fault_led;
activity crc_fault_act(.clk(GTX_CLK), .trigger(rx_crc_fault), .led(rx_crc_fault_led));

// Simple blinkers to show clocks exist
reg [24:0] cnt_rx=0, cnt_tx=0;
always @(posedge RX_CLK) cnt_rx <= cnt_rx+1'b1;  // 125MHz reference clock
always @(posedge GTX_CLK) cnt_tx<=cnt_tx+1'b1;  // 125MHz for parallel Rx data (generated by the PLL)
reg rx_crc_ok_once = 1'b0;
always @(posedge GTX_CLK) if(rx_crc_ok) rx_crc_ok_once <= 1'b1;
wire blink_rx = cnt_rx[24];
wire blink_tx = cnt_tx[24];

// LEDs to report monitoring status to upper layers
assign ethernet_leds = {rx_crc_ok_once, rx_crc_ok, aggregate_leds, blink_tx, blink_rx};

endmodule
